/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../graphql/context"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  EventInput: { // input type
    description: string; // String!
    endDate: NexusGenScalars['Date']; // Date!
    location: string; // String!
    name: string; // String!
    organization: string; // String!
    startDate: NexusGenScalars['Date']; // Date!
    submitterEmail: string; // String!
    submitterName: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenRootTypes {
  Event: { // root type
    description?: string | null; // String
    endDate?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    location?: string | null; // String
    name?: string | null; // String
    organization?: string | null; // String
    startDate?: NexusGenScalars['Date'] | null; // Date
    submitterEmail?: string | null; // String
    submitterName?: string | null; // String
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  EventInput: NexusGenInputs['EventInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
}

export interface NexusGenFieldTypes {
  Event: { // field return type
    description: string | null; // String
    endDate: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    location: string | null; // String
    name: string | null; // String
    organization: string | null; // String
    startDate: NexusGenScalars['Date'] | null; // Date
    submitterEmail: string | null; // String
    submitterName: string | null; // String
  }
  Mutation: { // field return type
    createEvent: NexusGenRootTypes['Event'] | null; // Event
  }
  Query: { // field return type
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
  }
}

export interface NexusGenFieldTypeNames {
  Event: { // field return type name
    description: 'String'
    endDate: 'Date'
    id: 'ID'
    location: 'String'
    name: 'String'
    organization: 'String'
    startDate: 'Date'
    submitterEmail: 'String'
    submitterName: 'String'
  }
  Mutation: { // field return type name
    createEvent: 'Event'
  }
  Query: { // field return type name
    events: 'Event'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createEvent: { // args
      createEventInput?: NexusGenInputs['EventInput'] | null; // EventInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Event" | "Mutation" | "Query";

export type NexusGenInputNames = "EventInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}